Guía de Aprendizaje

	




Andrés Torrijos Trujillo
Octubre 25 
Sena CEET
Bogotá D.C








Tabla de contenido
 Capítulo1 A qué se le denomina control de versiones……………………………………1
Definición…………………………………………………………………............1
Características……………………………………………………………………..1
Capitulo2 ¿Cuáles son los tipos de sistema de versiones y que los diferencia?................2
            Tipos de sistemas………………………………………………………………….2
Capitulo3 ¿Qué es Git?......................................................................................................3
            Definición…………………………………………………………………………3
           Características……………………………………………………………………..3
Capitulo4. ¿Cuáles son las principales características?...................................................4
           ventajas de Git…………………………………………………………………….4
Capitulo5. ¿Cuál es el funcionamiento del control de cambios del software?.................5
Capitulo6.Defina los siguientes conceptos……………………………………………….6
•	¿Qué es un repositorio?........................................................................................6
•	¿Qué es una rama o branch? ................................................................................6
•	 ¿Qué es un commit? ……………………………………………………………..6
•	 ¿Qué es un readme? ……………………………………………………………..6
Capitulo7.Realice un listado con todos los comandos de Git…………………………….7
             Describa cuál es su función………………………………………………………7
Capitulo8. listado con los de softwares que proporcionan una interfaz gráfica………….8
Capitulo9. ¿En qué consiste la sintaxis Markdowny cuáles son sus aplicaciones?..........9









1.	A qué se le denomina control de versiones
Se llama control de versiones a la gestión de diversos cambios que se realizan sobre los elementos de algún producto o una configuración del mismo. Una versión, revisión o edición de un producto, es el estado en el que se encuentra el mismo en un momento dado de su desarrollo o modificación
Características
Un sistema de control de versiones debe proporcionar.
•	Mecanismo de almacenamiento de los elementos que deba gestionar (archivos de texto, imágenes, documentación)
•	Posibilidad de realizar cambios sobres los elementos almacenados (modificaciones parciales, añadir, borrar, renombrar o mover elementos).
•	Registro histórico de las acciones realizadas con cada elemento o conjunto de elementos (normalmente pudiendo volver o extraer un estado anterior del producto).

2.	¿Cuáles son los tipos de sistema de versiones y que los diferencia? 
Tipo de sistemas
•	CVS
•	Subversión
•	SVK
•	Mercurial
•	GIT
•	Bazaar

3.	¿Qué es Git?
Git es una herramienta que realiza una función del control de versiones de código de forma distribuida, Con Git vamos a poder controlar todos los cambios que se hacen en nuestra aplicación y en nuestro código y vamos a tener control absoluto de todo lo que pasa en el código, pudiendo volver atrás en el tiempo, pudiendo abrir diferentes ramas de desarrollo, etc.

Vamos a poder trabajar en equipo de una manera muy sencilla y optimizada, de forma que si tenemos dos o tres personas trabajando en ciertas funcionalidades del proyecto y nosotros podemos estar trabajando en nuestra parte del código. Cuando acabamos de desarrollar nuestro código, utilizamos Git para mezclar los cambios con los otros compañeros. De forma que el código se mezcla de manera perfecta sin generar ningún tipo de fallo y de forma rápida.

4.	¿Cuáles son las principales características de Git?
•	Es muy potente
•	Fue diseñada por Linus Torvalds
•	No depende de un repositorio central
•	Es software libre
•	Con ella podemos mantener un historial completo de versiones
•	Podemos movernos, como si tuviéramos un puntero en el tiempo, por todas las revisiones de código y desplazarnos una manera muy ágil.
•	Es muy rápida
•	Tiene un sistema de trabajo con ramas que lo hace especialmente potente
Ventajas
•	Muy rápida
•	Multiplataforma
•	Que se puede utilizar a través de la línea de comando o con múltiples clientes
•	Es la base o el primer eslabón de herramientas de estructura a plataforma tipo GitHub o GitLab, que son las plataformas que se utilizan, de manera masiva, para albergar proyectos de software libre y otro tipo de proyectos que pueda tener una organización, y que quieran delegar en GitHub o en GitLab como su Servicio de Gestión de Control de Versiones Distribuidas.

5.	¿Cuál es el funcionamiento del control de cambios del software?
Control de cambios informal: Antes de que el Elemento de Configuración del Software pase a formar parte de una línea base, aquel que haya desarrollado el Elemento de Configuración del Software podrá realizar cualquier cambio justificado sobre él.
Control de cambios al nivel del proyecto o semi-formal: Una vez que el Elemento de Configuración del Software pasa la revisión técnica formal y se convierte en una línea base

6.	Definición

¿Qué es un repositorio?
•	Un repositorio, depósito o archivo es un sitio centralizado donde se almacena y mantiene información digital, habitualmente bases de datos o archivos informáticos.
¿Qué es una rama o branch?
•	En Git las Ramas son espacios o entornos independientes para que un Desarrollador sea Back-end, Front-end, Tester, etc. pueda usar y así trabajar sobre un mismo Proyecto sin chancar o borrar el conjunto de archivos originales del proyecto, dándonos flexibilidad para desarrollar nuestro proyecto de manera más organizada.
Cada Rama o Branch que creamos con Git, está compuesta por un archivo compuesto de 40 caracteres de una suma de control SHA-1.
¿Qué es un commit?
•	Consolidar, confirmar1 o hacer un commit se refiere, en el contexto de la ciencia de la computación y la gestión de datos, a la idea de confirmar un conjunto de cambios provisionales de forma permanente. Un uso popular es al final de una transacción de base de datos.
¿Qué es un readme?
•	Un archivo README contiene información acerca de otros archivos en un directorio. Es una forma de documentación de software, usualmente en un archivo de texto plano llamado READ.ME, README.TXT, README.md (para un archivo Markdown), README.1ST o simplemente README. En ocasiones, en español (y sobre todo en la década de 1990) puede venir traducido como LEEME.TXT
7.	Comandos Git y sus funciones
•	git help
Muestra una lista con los comandos más utilizados en GIT.
•	git init
Podemos ejecutar ese comando para crear localmente un repositorio con GIT y así utilizar todo el funcionamiento que GIT ofrece.  Basta con estar ubicados dentro de la carpeta donde tenemos nuestro proyecto y ejecutar el comando.  Cuando agreguemos archivos y un commit, se va a crear el branch master por defecto.
•	git add + path
Agrega al repositorio los archivos que indiquemos.
•	git add -A
Agrega al repositorio TODOS los archivos y carpetas que estén en nuestro proyecto, los cuales GIT no está siguiendo.
•	git commit -m "mensaje" + archivos
Hace commit a los archivos que indiquemos, de esta manera quedan guardados nuestras modificaciones.
•	git commit -am "mensaje"
Hace commit de los archivos que han sido modificados y GIT los está siguiendo.
•	git checkout -b NombreDeBranch
Crea un nuevo branch y automáticamente GIT se cambia al branch creado, clonando el branch desde donde ejecutamos el comando.
•	git branch
Nos muestra una lista de los branches que existen en nuestro repositorio.
•	git checkout NombreDeBranch
Sirve para moverse entre branches, en este caso vamos al branch que indicamos en el comando.
•	git merge NombreDeBranch
Hace un merge entre dos branches, en este caso la dirección del merge sería entre el branch que indiquemos en el comando, y el branch donde estemos ubicados.
•	git status
Nos indica el estado del repositorio, por ejemplo, cuales están modificados, cuales no están siendo seguidos por GIT, entre otras características.
•	git clone URL/name.git Nombre Proyecto
Clona un proyecto de git en la carpeta Nombre Proyecto.
•	git push origin NombreDeBranch
Luego de que hicimos un git commit, si estamos trabajando remotamente, este comando va a subir los archivos al repositorio remoto, específicamente al branch que indiquemos.
•	git pull origin NombreDeBranch
Hace una actualización en nuestro branch local, desde un branch remoto que indicamos en el comando



8.	listados de software que proporciona una interfaz grafica

Tower 
 https://programacion.net/files/editor/tower.png
Fork
 

GitHub Desktop
 
Sourcetree
